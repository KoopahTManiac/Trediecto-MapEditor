/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mapeditor;

import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Zoran
 */
public class Form extends javax.swing.JFrame
{
    public static boolean clicking = false;
    public static Point Mouse = new Point(0,0);
    public static Point MouseStart = new Point(0,0);
    public static Point DragStart = new Point(0,0);
    public static Point CorrentTile = new Point(2,0);
    public static boolean saved = true;
    public static double zoom = 1;
    public static boolean allredyPressed= false;
    /**
     * Creates new form Form
     */
    public Form()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        OpenFile = new javax.swing.JFileChooser();
        SaveFile = new javax.swing.JFileChooser();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        InputX = new mapeditor.NumericInputBox();
        InputY = new mapeditor.NumericInputBox();
        jOptionPane1 = new javax.swing.JOptionPane();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        canvasPaintObjekt1 = new mapeditor.CanvasPaintObjekt();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Open = new javax.swing.JMenuItem();
        Save = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jDialog1.setMinimumSize(new java.awt.Dimension(244, 94));
        jDialog1.addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                jDialog1WindowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                jDialog1WindowClosing(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Map Size:");

        jLabel2.setText("X:");

        jLabel3.setText("Y:");

        jButton1.setText("Set Size");
        jButton1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        InputX.setText("10");

        InputY.setText("10");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputX, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(InputY, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(InputX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(InputY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(800, 600));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowOpened(java.awt.event.WindowEvent evt)
            {
                formWindowOpened(evt);
            }
        });

        label1.setText("Map Editor:");

        label2.setText("Corrent:");

        canvasPaintObjekt1.setName("Canvas1"); // NOI18N
        canvasPaintObjekt1.addMouseWheelListener(new java.awt.event.MouseWheelListener()
        {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt)
            {
                canvasPaintObjekt1MouseWheelMoved(evt);
            }
        });
        canvasPaintObjekt1.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                canvasPaintObjekt1MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt)
            {
                canvasPaintObjekt1MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt)
            {
                canvasPaintObjekt1MouseReleased(evt);
            }
        });
        canvasPaintObjekt1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter()
        {
            public void mouseDragged(java.awt.event.MouseEvent evt)
            {
                canvasPaintObjekt1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt)
            {
                canvasPaintObjekt1MouseMoved(evt);
            }
        });
        canvasPaintObjekt1.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                canvasPaintObjekt1KeyPressed(evt);
            }
        });

        File.setText("File");

        Open.setText("Open");
        Open.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                OpenActionPerformed(evt);
            }
        });
        File.add(Open);

        Save.setText("Save");
        Save.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SaveActionPerformed(evt);
            }
        });
        File.add(Save);

        jMenuBar1.add(File);

        jMenu2.setText("Edit");

        jMenuItem1.setText("Map Size");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(canvasPaintObjekt1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(canvasPaintObjekt1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        canvasPaintObjekt1.getAccessibleContext().setAccessibleName("Canvas1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void canvasPaintObjekt1MousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvasPaintObjekt1MousePressed
    {//GEN-HEADEREND:event_canvasPaintObjekt1MousePressed
        clicking = true;
        Mouse = evt.getPoint();
        if (evt.getButton() == MouseEvent.BUTTON2)
        {
            zoom = 1;
        }
        if (allredyPressed)
        {
            
        }
        else
        {
            MouseStart = evt.getPoint();
            allredyPressed = true;
            MapEditor.MouseDragPoints = evt.getPoint();
        }
        
    }//GEN-LAST:event_canvasPaintObjekt1MousePressed

    private void canvasPaintObjekt1MouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvasPaintObjekt1MouseReleased
    {//GEN-HEADEREND:event_canvasPaintObjekt1MouseReleased
        clicking = false;
        Mouse = evt.getPoint();
        DragStart = evt.getPoint();
        allredyPressed = false;
        
    }//GEN-LAST:event_canvasPaintObjekt1MouseReleased

    private void canvasPaintObjekt1MouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvasPaintObjekt1MouseMoved
    {//GEN-HEADEREND:event_canvasPaintObjekt1MouseMoved
        Mouse = evt.getPoint();
    }//GEN-LAST:event_canvasPaintObjekt1MouseMoved

    private void canvasPaintObjekt1MouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvasPaintObjekt1MouseDragged
    {//GEN-HEADEREND:event_canvasPaintObjekt1MouseDragged
        Thread temp = new MouseDragThread(evt);
        temp.run();
        
    }//GEN-LAST:event_canvasPaintObjekt1MouseDragged

    private void canvasPaintObjekt1MouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_canvasPaintObjekt1MouseClicked
    {//GEN-HEADEREND:event_canvasPaintObjekt1MouseClicked
        
        if (SwingUtilities.isLeftMouseButton(evt))
        {
            Mouse = evt.getPoint();
            DragStart = evt.getPoint();
            UpdateMap();
        }
    }//GEN-LAST:event_canvasPaintObjekt1MouseClicked

    private void OpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_OpenActionPerformed
    {//GEN-HEADEREND:event_OpenActionPerformed
        Boolean accepted = true;
        if (saved != true)
        {
            if (jOptionPane1.showConfirmDialog(null, "Map Is Not Saved Are You Sure You Want To Continue") == 0)
            {
                accepted = true;
            }
            else
            {
                accepted = false;
            }
        }
        if (accepted)
        {
            OpenFile.setFileFilter(new FileNameExtensionFilter("(Map Editor) *.Map", "Map"));
            this.OpenFile.setVisible(true);
            int returnVal = OpenFile.showOpenDialog(Form.this);

             if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = OpenFile.getSelectedFile();
                FileReader reader;
                String data = "";
                Point[][] mapData = new Point[0][0];
                Point[][] mapData2 = new Point[0][0];
                if (file.canRead() && file.exists())
                {
                    try
                    {
                        reader = new FileReader(file);
                        boolean end = true;
                        while(end)
                        {
                            int temp = reader.read();
                            char temp2 = (char)temp;
                            if (temp == -1)
                            {
                                end = false;
                            }
                            else
                            {
                                data += temp2;
                            }
                        }
                        System.out.print(data);
                        mapData = StringToArray(data);
                        reader.close();
                        
                        
                        file = new File(file.getPath().substring(0,file.getPath().indexOf(".Map")) + ".CMap");
                        data = "";
                        reader = new FileReader(file);
                        end = true;
                        while(end)
                        {
                            int temp = reader.read();
                            char temp2 = (char)temp;
                            if (temp == -1)
                            {
                                end = false;
                            }
                            else
                            {
                                data += temp2;
                            }
                        }
                        System.out.print(data);
                        mapData2 = StringToArray(data);
                        reader.close();
                        
                        
                        
                    }
                    catch (Exception ex)
                    {
                        JOptionPane.showMessageDialog(null, ex.getMessage());
                    }
                }
                MapEditor.map = mapData;
                MapEditor.mapColision = mapData2;
            }
        }
    }//GEN-LAST:event_OpenActionPerformed

    public static String ArrayToString(Point[][] values)
    {
//        XStream toXml = new XStream(new StaxDriver());
        
//        String data = toXml.toXML(values);
        
        StringBuilder results = new StringBuilder();
        for (int i = 0; i < values.length; ++i)
        {
            results.append('[');
            for (int j = 0; j < values[i].length; ++j)
                results.append(values[i][j].x).append('_').append(values[i][j].y).append(",");
            results.append(']').append('-');
        }
        return results.substring(0);
    }
    public static Point[][] StringToArray(String data)
    {
//        XStream toXml = new XStream(new StaxDriver());
//        
//        return (Point[][])toXml.fromXML(data);
        try
        {
            int lenghtX =0;
            int lenghtY =0;
            String[] temp = data.split("-");
            lenghtX = temp.length;
            Point[][] dataStorage = new Point[temp.length][1];
            for (int i=0; i < temp.length;i++)
            {
                int tempS = temp[i].indexOf("[");
                int tempS2 = temp[i].indexOf("]");
                String tempR = temp[i].substring(tempS+1,tempS2-1);
                String[] tempR2 = tempR.split(",");
                Point[] tempI = new Point[tempR2.length];
                for (int t=0; t < tempR2.length; t++)
                {
                    String[] tempStringArray = tempR2[t].split("_");
                    Point TempPO = new Point(Integer.parseInt(tempStringArray[0]),Integer.parseInt(tempStringArray[1]));
                    tempI[t] = TempPO;
                }
                dataStorage[i] = tempI;
            }
            return dataStorage;
        }
        catch (Exception e)
        {
            return new Point[0][0];
        }
    }
    private void SaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_SaveActionPerformed
    {//GEN-HEADEREND:event_SaveActionPerformed
        SaveFile.setFileFilter(new FileNameExtensionFilter("(Map Editor) *.Map", "Map"));
        this.SaveFile.setVisible(true);
        int returnVal = SaveFile.showSaveDialog(Form.this);
        
         if (returnVal == JFileChooser.APPROVE_OPTION) 
         {
            File file = SaveFile.getSelectedFile();
            if (file.getName().contains(".Map"))
            {
                
            }
            else
            {
                file = new File(file.getPath()+".Map");
            }
            try
            {
                file.setWritable(true);
                FileWriter write = new FileWriter(file);
                write.write(ArrayToString(MapEditor.map));
                write.flush();
                write.close();
                
                file = new File(file.getPath().substring(0,file.getPath().indexOf(".Map")) + ".CMap");
                file.setWritable(true);
                write = new FileWriter(file);
                write.write(ArrayToString(MapEditor.mapColision));
                write.flush();
                write.close();
                
                saved = true;
            }
            catch (Exception e)
            {
                jOptionPane1.showMessageDialog(null, e.getMessage());
            }
         }
    }//GEN-LAST:event_SaveActionPerformed

    private void jDialog1WindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_jDialog1WindowOpened
    {//GEN-HEADEREND:event_jDialog1WindowOpened
        
    }//GEN-LAST:event_jDialog1WindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        MapEditor.map = MapEditor.UpdateMap(InputX.getInt(),InputY.getInt());
        MapEditor.mapColision = MapEditor.UpdateMap(InputX.getInt()*10,InputY.getInt()*10);
        Form.this.setEnabled(true);
        jDialog1.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowOpened
    {//GEN-HEADEREND:event_formWindowOpened
        
        jDialog1.setBounds(jDialog1.getBounds().x, jDialog1.getBounds().y, 280, 150);
        jDialog1.setVisible(true);
        Form.this.setEnabled(false);
    }//GEN-LAST:event_formWindowOpened

    private void jDialog1WindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_jDialog1WindowClosing
    {//GEN-HEADEREND:event_jDialog1WindowClosing
        MapEditor.map = MapEditor.UpdateMap(InputX.getInt(),InputY.getInt());
        Form.this.setEnabled(true);
    }//GEN-LAST:event_jDialog1WindowClosing

    private void canvasPaintObjekt1MouseWheelMoved(java.awt.event.MouseWheelEvent evt)//GEN-FIRST:event_canvasPaintObjekt1MouseWheelMoved
    {//GEN-HEADEREND:event_canvasPaintObjekt1MouseWheelMoved
        if (evt.getUnitsToScroll() <0)
        {
            if (zoom <2)
            {
                zoom +=0.1;
            }
            else
            {
                zoom =2;
            }
        }
        else if(evt.getUnitsToScroll() >0)
        {
            if (zoom >0.2)
            {
                zoom -=0.1;
            }
            else
            {
                zoom =0.1;
            }
        }
    }//GEN-LAST:event_canvasPaintObjekt1MouseWheelMoved

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        jDialog1.setBounds(jDialog1.getBounds().x, jDialog1.getBounds().y, 280, 150);
        jDialog1.setVisible(true);
        Form.this.setEnabled(false);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void canvasPaintObjekt1KeyPressed(java.awt.event.KeyEvent evt)//GEN-FIRST:event_canvasPaintObjekt1KeyPressed
    {//GEN-HEADEREND:event_canvasPaintObjekt1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_PAGE_UP)
        {
            MapEditor.EditState =2;
        }
        if (evt.getKeyCode() == KeyEvent.VK_PAGE_DOWN)
        {
            MapEditor.EditState =1;
        }
    }//GEN-LAST:event_canvasPaintObjekt1KeyPressed
    
    public static void UpdateMap()
    {
        if (MapEditor.EditState == 2)
        {
            boolean changedTile = false;
            saved = false;
            
            for (int x = 0; x < MapEditor.Tiles.length; x++)
            {
                for (int y=0; y < MapEditor.Tiles[0].length;y++)
                {
                    if (Mouse.x >= canvasPaintObjekt1.getWidth()-40 && Mouse.x <= canvasPaintObjekt1.getWidth() && Mouse.y >= (x+y* MapEditor.map_tiles.y)*40+50 && Mouse.y <= x*40+90)
                    {
                        CorrentTile = new Point(x,y);
                        changedTile = true;
                    }
                }
            }
            if (!changedTile)
            {
                for (int x=0; x < MapEditor.mapColision.length; x++)
                {
                    for (int y=0; y < MapEditor.mapColision[0].length;y++)
                    {
                        if (Mouse.x >(int)(x*(4*zoom))+MapEditor.Scroll.x && Mouse.x < (int)(x*(4*zoom)+(4*zoom))+MapEditor.Scroll.x)
                        {
                            if (Mouse.y >(int)(y*(4*zoom))+MapEditor.Scroll.y && Mouse.y <(int)(y*(4*zoom)+(4*zoom))+MapEditor.Scroll.y)
                            {
                                if (CorrentTile.x == 2)
                                {
                                    if(y >0)
                                    {
                                        if(x > 0)
                                        {
                                            MapEditor.mapColision[x-1][y-1] = new Point(1,0);
                                        }
                                        MapEditor.mapColision[x][y-1] = new Point(1,0);
                                        if (x < MapEditor.mapColision.length-1)
                                        {
                                            MapEditor.mapColision[x+1][y-1] = new Point(1,0);
                                        }
                                    }
                                    if(x > 0)
                                    {
                                        MapEditor.mapColision[x-1][y] = new Point(1,0);
                                    }
                                    MapEditor.mapColision[x][y] = new Point(1,0);
                                    if(x < MapEditor.mapColision.length-1)
                                    {
                                        MapEditor.mapColision[x+1][y] = new Point(1,0);
                                    }
                                    if (y < MapEditor.mapColision[0].length-1)
                                    {
                                        if(x > 0)
                                        {
                                            MapEditor.mapColision[x-1][y+1] = new Point(1,0);
                                        }
                                        MapEditor.mapColision[x][y+1] = new Point(1,0);
                                        if(x < MapEditor.mapColision.length-1)
                                        {
                                            MapEditor.mapColision[x+1][y+1] = new Point(1,0);
                                        }
                                    }
                                }
                                else
                                {
                                    MapEditor.mapColision[x][y] = CorrentTile;
                                }
                            }
                        }
                    }
                }
            }
            
        }
        else
        {
            boolean changedTile = false;
            saved = false;


            for (int x = 0; x < MapEditor.Tiles.length; x++)
            {
                for (int y=0; y < MapEditor.Tiles[0].length;y++)
                {
                    if (Mouse.x >= canvasPaintObjekt1.getWidth()-40 && Mouse.x <= canvasPaintObjekt1.getWidth() && Mouse.y >= (x+y* MapEditor.map_tiles.y)*40+50 && Mouse.y <= x*40+90)
                    {
                        CorrentTile = new Point(x,y);
                        changedTile = true;
                    }
                }
            }
            if(changedTile != true)
            {
                for (int x=0; x < MapEditor.map.length; x++)
                {
                    for (int y=0; y < MapEditor.map[0].length;y++)
                    {
                        if (Mouse.x >x*(int)(40*zoom)+MapEditor.Scroll.x && Mouse.x < x*(int)(40*zoom)+(int)(40*zoom)+MapEditor.Scroll.x)
                        {
                            if (Mouse.y >y*(int)(40*zoom)+MapEditor.Scroll.y && Mouse.y <y*(int)(40*zoom)+(int)(40*zoom)+MapEditor.Scroll.y)
                            {
                                MapEditor.map[x][y] = CorrentTile;
                            }
                        }
                    }
                }
            }
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /*
         * Set the Nimbus look and feel
         */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Form().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private mapeditor.NumericInputBox InputX;
    private mapeditor.NumericInputBox InputY;
    private javax.swing.JMenuItem Open;
    private javax.swing.JFileChooser OpenFile;
    private javax.swing.JMenuItem Save;
    private javax.swing.JFileChooser SaveFile;
    public static mapeditor.CanvasPaintObjekt canvasPaintObjekt1;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JOptionPane jOptionPane1;
    private java.awt.Label label1;
    private java.awt.Label label2;
    // End of variables declaration//GEN-END:variables
}
